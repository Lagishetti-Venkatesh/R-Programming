a <- 234
b <- 32
#addition
a + b
#subtraction
a-b
#multiplication
a*b
#division
a/b
#reminder value
a%%b
my_vector <- c(2, 4, 6, 8, 10)
print(my_vector[my_vector/2 > 3])
#greater
print(my_vector[my_vector/2 > 3])
#less than
print(my_vector[my_vector/2 < 3])
#equal to
print(my_vector[my_vector/2 == 3])
#greater than equal to
print(my_vector[my_vector/2 >= 3])
#less than equal to
print(my_vector[my_vector/2 <= 3])
# not equal to
print(my_vector[my_vector/2 != 3])
#reminder value
a%%b
#division
a/b
#numerical
n = 23.34
print(class(n))
n = 23
print(class(n))
#numerical
n = 23.34555555555555555555
print(n)
print(class(n))
n = 23
print(class(n))
#character
c = 'Peaceful'
print(class(c))
c = 'V'
print(class(c))
l = T
print(l)
print(class(l))
l = F
print(class(l))
print(l)
l = FALSE
print(class(l))
print(l)
l = TRUE
print(l)
print(class(l))
dog_breeds  <- rep(c("Labrador Retriever", "German Shepherd", "Golden Retriever"), times = 3)
summary(dog_breeds)
fact.dog <-factor(dog_breeds, ordered = T, levels = c("Labrador Retriever", "German Shepherd", "Golden Retriever"))
summary(fact.dog)
temps <- c('cold', 'hot', 'med', 'hot', 'med','cold', 'hot')
summary(temps)
temps <- c('cold', 'hot', 'med', 'hot', 'med',1, 'hot')
summary(temps)
temps <- c('cold', 'hot', 'med', 'hot', 'med',1, 'hot')
summary(temps)
class(temps[-2])
print(temps[-2])
print(class(temps[-2]))
print(temps[1])
print(temps[6])
print(class(temps[6]))
number <- c(1, 2, 3, 4, 'ser')
print(number[5])
number <- c(1, 2, 3, 4, 'ser')
print(number[1])
print(class(number[1]))
print(class(number[5]))
fact.temps <-factor(temps, ordered = T, levels=c('hot', 'med', 'cold'))
print(fact.temps)
summary(fact.temps)
print(v2[c(2, 5, 7, 9)])
v1 <- 1:10
v2 <- c("apple", "banana", "cherry", "date", "elderberry", "fig", "grape", "honeydew", "imbe", "jackfruit")
print(v1[3])
print(v1[1])
print(v2[3])
print(v2[9])
print(v2[2:7])
print(v1[3])
print(v1[1])
print(v2[3])
print(v2[9])
rupees <- c(100, 200, 500, 1000, 2000)
print(rupees)
dollars <- rupees * 0.014  # Assuming 1 INR = 0.014 USD
print(dollars)
print(dollars)
v <- c(rupees, dollars)
print(v)
v<- matrix(v, byrow =T , nrow=2)
print(v)
rownames(v) <- c('India', 'USA')
colnames(v) <- c('a', 'b', 'c', 'd', 'e')
print(v)
print(rowSums(v))
print(colSums(v))
print(rowMeans(v))
cad <-  rupees * 0.018
print(cad)
v_new <- rbind(v, cad)
print(v_new)
avg <- rowMeans(v_new)
print(avg)
v_new <- cbind(v_new, avg)
print(v_new)
print(colMeans(v))
# Load the Shiny library
library(shiny)
install.packages("shiny")
# Load the Shiny library
library(shiny)
# Define the UI for the Shiny app
ui <- fluidPage(
# Application title
titlePanel("Simple Shiny Greeting App"),
# User input field for name
sidebarLayout(
sidebarPanel(
textInput("name", "Enter your name:", ""),
actionButton("greetBtn", "Greet")
),
# Display the greeting
mainPanel(
h3("Greeting:"),
textOutput("greeting")
)
)
)
# Define the server logic for the Shiny app
server <- function(input, output) {
observeEvent(input$greetBtn, {
user_name <- input$name
greeting <- paste("Hello,", user_name, "!")
output$greeting <- renderText({
greeting
})
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
runApp('D:/R_programming/R shiny programming/date_select.R')
runApp('D:/R_programming/R shiny programming/project1/project1')
runApp('D:/R_programming/R shiny programming/project1/project1')
runApp('D:/R_programming/R shiny programming/project1/project1')
library(shiny)
runExample("01_hello")
runApp("project1")
rlang::last_trace()
runApp("D:\R_programming\R shiny programming\project1")
runApp("D:\R_programming\R_shiny_programming\project1")
runApp('D:/R_programming/R_shiny_programming/project1')
runApp('D:/R_programming/R_shiny_programming/project1')
runApp('D:/R_programming/R_shiny_programming/project1')
runApp('D:/R_programming/R_shiny_programming/project1')
runApp('D:/R_programming/R_shiny_programming/project1')
library(shiny)
runApp("project1")
source('D:/R_programming/R_shiny_programming/runningapp.R')
library(shiny)
runApp("project1")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
source('C:/Users/venka/Documents/R_programming/R_shiny_programming/runningapp.R')
library(shiny)
runApp("project1")
setwd("C:/Users/venka/Documents")
source('R_programming/R_shiny_programming/runningapp.R')
setwd("C:/Users/venka/Documents/R_programming/R_shiny_programming")
source('runningapp.R')
library(shiny)
runApp("project1")
library(shiny)
runApp("project1")
library(shiny)
runApp("project1", display.mode = "showcase")
source('runningapp.R')
source('runningapp.R')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
#
# library(shiny)
#
# # Define UI for application that draws a histogram
# ui <- fluidPage(
#
#     # Application title
#     titlePanel("Old Faithful Geyser Data"),
#
#     # Sidebar with a slider input for number of bins
#     sidebarLayout(
#         sidebarPanel(
#             sliderInput("bins",
#                         "Number of bins:",
#                         min = 1,
#                         max = 50,
#                         value = 30)
#         ),
#
#         # Show a plot of the generated distribution
#         mainPanel(
#            plotOutput("distPlot")
#         )
#     )
# )
#
# # Define server logic required to draw a histogram
# server <- function(input, output) {
#
#     output$distPlot <- renderPlot({
#         # generate bins based on input$bins from ui.R
#         x    <- faithful[, 2]
#         bins <- seq(min(x), max(x), length.out = input$bins + 1)
#
#         # draw the histogram with the specified number of bins
#         hist(x, breaks = bins, col = 'darkgray', border = 'white',
#              xlab = 'Waiting time to next eruption (in mins)',
#              main = 'Histogram of waiting times')
#     })
# }
#
# # Run the application
# shinyApp(ui = ui, server = server)
library(shiny)
runExample("02_text")
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
runApp('tables_dfs/tables_data_frames')
